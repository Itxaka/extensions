#!/bin/bash
# GenISO script by Ettore Di Giacinto <mudler@sabayonlinux.org>,
#                  Daniele Rondina <geaaru@sabayonlinux.org>
# License: MIT
# See also (and inspired by):
# https://github.com/Tomas-M/linux-live.git
# http://minimal.linux-bg.org/#home

export IMAGE_NAME="${IMAGE_NAME:-luet_os.iso}"
export LUET_PACKAGES="${LUET_PACKAGES:-}"
export LUET_REPOS="${LUET_REPOS:-}"
export LUET_INITRAMFS_REPOS="${LUET_INITRAMFS_REPOS:-}"
export LUET_BIN="${LUET_BIN:-../luet}"
export ROOT_DIR="${ROOT_DIR:-$PWD}"
export LUET_CONFIG="${LUET_CONFIG:-../conf/luet-local.yaml}"
export WORKDIR="$ROOT_DIR/isowork"
export OVERLAY="${OVERLAY:-false}"
export FIRMWARE_TYPE="${FIRMWARE_TYPE:-both}"
export CA_CERTIFICATES="${CA_CERTIFICATES:-/etc/ssl/certs/ca-certificates.crt}"
export ARCH="${ARCH:-x86_64}"
export ISOIMAGE_PACKAGES="${ISOIMAGE_PACKAGES:-live/syslinux system/sabayon-live-boot}"
export UEFI_PACKAGES="${UEFI_PACKAGES:-live/systemd-boot system/sabayon-live-boot}"
export LUET_YES=true
#export BOOT_DIR="$WORKDIR/boot"
export ROOTFS_DIR="$WORKDIR/rootfs"
export OVERLAY_DIR="$WORKDIR/overlay"
export ISOIMAGE="$WORKDIR/isoimage"

export KERNEL_INSTALLED=$WORKDIR/kernel/kernel_installed

export FIRST_STAGE="${FIRST_STAGE:-distro/seed}"

export GEN_ROOTFS="${GEN_ROOTFS:-true}"

export SCRIPT_DIR="${SCRIPT_DIR:-/usr/share/luet-extension/geniso}"
export SUDO=${SUDO:-}

umount_rootfs() {
  set +e
  local rootfs=$1
  #${SUDO} umount -l $rootfs/boot

  ${SUDO} umount -l $rootfs/dev/pts
  ${SUDO} umount -l $rootfs/dev/
  ${SUDO} umount -l $rootfs/sys/
  ${SUDO} umount -l $rootfs/proc/
}

# TODO: replace with luet box exec
luet_install() {

  local rootfs=$1
  local packages="$2"
  local repositories="$3"

  ## Initial rootfs
  pushd "$rootfs"
 # mkdir -p boot
 # mount --bind $BOOT_DIR boot
  mkdir -p var/lock
  mkdir -p run/lock
  mkdir -p var/cache/luet
  mkdir -p var/luet
  mkdir -p etc/luet

  mkdir -p dev
  mkdir -p sys
  mkdir -p proc
  mkdir -p tmp
  mkdir -p dev/pts
  cp -rfv "${LUET_CONFIG}" etc/luet/luet.yaml
  cp -rfv "${LUET_BIN}" luet
  ${SUDO} mount --bind /dev $rootfs/dev/
  ${SUDO} mount --bind /sys $rootfs/sys/
  ${SUDO} mount --bind /proc $rootfs/proc/
  ${SUDO} mount --bind /dev/pts $rootfs/dev/pts

  # Required to connect to remote repositories
  if [ ! -f "etc/resolv.conf" ]; then
    echo "nameserver 8.8.8.8" > etc/resolv.conf
  fi
  if [ ! -f "etc/ssl/certs/ca-certificates.crt" ]; then
    mkdir -p etc/ssl/certs
    cp -rfv "${CA_CERTIFICATES}" etc/ssl/certs
  fi

  if [ "${repositories}" != "" ] ; then
    # Install repositories packages before install
    # needed packages
    ${SUDO} chroot . /luet install -y ${repositories}
  fi

  ${SUDO} chroot . /luet config
  ${SUDO} chroot . /luet install -y ${packages}
  ${SUDO} chroot . /luet cleanup

  # Cleanup/umount
  umount_rootfs $rootfs || true

  ${SUDO} rm -rf luet
  popd

}

trap cleanup 1 2 3 6 EXIT

cleanup()
{
   umount_rootfs  "$ROOTFS_DIR"
   umount_rootfs  "$OVERLAY_DIR"
}

cleanup

if [[ "$GEN_ROOTFS" == true ]]; then

  mkdir -p $WORKDIR

  rm -rf "$ROOTFS_DIR"
  mkdir -p "$ROOTFS_DIR"

  rm -rf "$OVERLAY_DIR"
  mkdir -p "$OVERLAY_DIR"

  echo "Initial root:"
  ls -liah  "$ROOTFS_DIR"
  ls -liah  "$OVERLAY_DIR"


  set -e


  if [[ "$OVERLAY" == true ]]; then
    echo "Building overlay"
    luet_install "$ROOTFS_DIR" "${FIRST_STAGE}" "${LUET_INITRAMFS_REPOS}"
    luet_install "$OVERLAY_DIR" "${LUET_PACKAGES}" "${LUET_REPOS}" || true
  else
    luet_install "$ROOTFS_DIR" "${LUET_PACKAGES}" "${LUET_REPOS}" || true
  fi

fi

for script in $(ls ${SCRIPT_DIR} | grep '^[0-9]*_.*.sh'); do
  echo "Executing script '$script'."
  ${SCRIPT_DIR}/$script || {
    echo "${script}: Something went wrong! Exiting."
    exit 1
  }
done
